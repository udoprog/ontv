use iced::widget::{column, radio, text, text_input};
use iced::Element;
use serde::{Deserialize, Serialize};

use crate::message::{Message, ThemeType};

/// Message generated by settings page.
#[derive(Debug, Clone)]
pub(crate) enum SettingsMessage {
    /// Request to change theme.
    ThemeChanged(ThemeType),
    /// Legacy API key changed.
    ThetvdbLegacyApiChanged(String),
}

/// The state for the settings page.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub(crate) struct State {
    #[serde(default)]
    pub(crate) theme: ThemeType,
    #[serde(default)]
    pub(crate) thetvdb_legacy_apikey: String,
}

impl Default for State {
    #[inline]
    fn default() -> Self {
        Self {
            theme: ThemeType::Dark,
            thetvdb_legacy_apikey: String::new(),
        }
    }
}

/// Handle theme change.
pub(crate) fn update(state: &mut State, message: SettingsMessage) -> bool {
    match message {
        SettingsMessage::ThemeChanged(theme) => {
            state.theme = theme;
            false
        }
        SettingsMessage::ThetvdbLegacyApiChanged(string) => {
            state.thetvdb_legacy_apikey = string;
            true
        }
    }
}

/// Generate the view for the settings page.
pub(crate) fn view(state: &State) -> Element<'static, Message> {
    let choose_theme = [ThemeType::Light, ThemeType::Dark].iter().fold(
        column![text("Theme:")].spacing(10),
        |column, theme| {
            column.push(radio(
                format!("{:?}", theme),
                *theme,
                Some(state.theme),
                |theme| Message::Settings(SettingsMessage::ThemeChanged(theme)),
            ))
        },
    );

    let thetvdb_legacy_apikey = column![
        text("TheTVDB Legacy API Key:"),
        text_input("Key...", &state.thetvdb_legacy_apikey, |value| {
            Message::Settings(SettingsMessage::ThetvdbLegacyApiChanged(value))
        }),
    ]
    .spacing(10);

    column![choose_theme, thetvdb_legacy_apikey]
        .spacing(20)
        .padding(20)
        .into()
}

use iced::widget::{column, radio, text, text_input, Column};
use iced::Command;

use crate::message::Message;
use crate::model::ThemeType;
use crate::params::{default_container, GAP, SPACE};

use crate::state::State;

#[derive(Default)]
pub(crate) struct Settings;

/// Message generated by settings page.
#[derive(Debug, Clone)]
pub(crate) enum M {
    ThemeChanged(ThemeType),
    TvdbLegacyApiKeyChange(String),
    TmdbApiKeyChange(String),
}

impl Settings {
    /// Prepare data that is needed for the view.
    pub(crate) fn prepare(&mut self, _: &mut State) {}

    /// Handle theme change.
    pub(crate) fn update(&mut self, s: &mut State, message: M) -> Command<Message> {
        match message {
            M::ThemeChanged(theme) => {
                s.service.set_theme(theme);
            }
            M::TvdbLegacyApiKeyChange(string) => {
                s.service.set_tvdb_legacy_api_key(string);
            }
            M::TmdbApiKeyChange(string) => {
                s.service.set_tmdb_api_key(string);
            }
        }

        Command::none()
    }

    /// Generate the view for the settings page.
    pub(crate) fn view(&self, s: &State) -> Column<'static, Message> {
        let config = s.service.config();

        let mut page = Column::new();

        page = page.push([ThemeType::Light, ThemeType::Dark].iter().fold(
            column![text("Theme:")].spacing(SPACE),
            |column, theme| {
                column.push(radio(
                    format!("{theme:?}"),
                    *theme,
                    Some(config.theme),
                    |theme| Message::Settings(M::ThemeChanged(theme)),
                ))
            },
        ));

        page = page.push(
            column![
                text("TheTVDB Legacy API Key:"),
                text_input("Key...", &config.tvdb_legacy_apikey, |value| {
                    Message::Settings(M::TvdbLegacyApiKeyChange(value))
                }),
            ]
            .spacing(SPACE),
        );

        page = page.push(
            column![
                text("TheMovieDB API Key:"),
                text_input("Key...", &config.tmdb_api_key, |value| {
                    Message::Settings(M::TmdbApiKeyChange(value))
                }),
            ]
            .spacing(SPACE),
        );

        default_container(page.spacing(GAP).padding(GAP))
    }
}

use iced::widget::{column, radio, text, text_input, Column};
use iced::Command;

use crate::assets::Assets;
use crate::message::Message;
use crate::model::ThemeType;
use crate::params::{default_container, GAP, SPACE};
use crate::service::Service;

#[derive(Default)]
pub(crate) struct State;

/// Message generated by settings page.
#[derive(Debug, Clone)]
pub(crate) enum M {
    /// Request to change theme.
    ThemeChanged(ThemeType),
    /// Legacy API key changed.
    ThetvdbLegacyApiChanged(String),
}

impl State {
    /// Prepare data that is needed for the view.
    pub(crate) fn prepare(&mut self, _: &Service, _: &mut Assets) {}

    /// Handle theme change.
    pub(crate) fn update(&mut self, service: &mut Service, message: M) -> Command<Message> {
        match message {
            M::ThemeChanged(theme) => {
                service.set_theme(theme);
            }
            M::ThetvdbLegacyApiChanged(string) => {
                service.set_thetvdb_legacy_apikey(string);
            }
        }

        Command::none()
    }

    /// Generate the view for the settings page.
    pub(crate) fn view(&self, service: &Service) -> Column<'static, Message> {
        let config = service.config();

        let choose_theme = [ThemeType::Light, ThemeType::Dark].iter().fold(
            column![text("Theme:")].spacing(SPACE),
            |column, theme| {
                column.push(radio(
                    format!("{:?}", theme),
                    *theme,
                    Some(config.theme),
                    |theme| Message::Settings(M::ThemeChanged(theme)),
                ))
            },
        );

        let thetvdb_legacy_apikey = column![
            text("TheTVDB Legacy API Key:"),
            text_input("Key...", &config.thetvdb_legacy_apikey, |value| {
                Message::Settings(M::ThetvdbLegacyApiChanged(value))
            }),
        ]
        .spacing(SPACE);

        let page = column![choose_theme, thetvdb_legacy_apikey]
            .spacing(GAP)
            .padding(GAP);

        default_container(page)
    }
}

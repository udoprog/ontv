use iced::widget::{column, image, row, text};
use iced::{Alignment, Command, Element, Length};

use crate::message::Message;
use crate::params::GAP;
use crate::service::Service;

/// Message generated by dashboard page.
#[derive(Debug, Clone)]
pub(crate) enum DashboardMessage {}

/// The state for the settings page.
#[derive(Default)]
pub(crate) struct State {}

impl State {
    /// Handle theme change.
    pub(crate) fn update(&mut self, message: DashboardMessage) -> Command<Message> {
        match message {}
    }

    /// Generate the view for the settings page.
    pub(crate) fn view(&self, service: &Service) -> Element<'static, Message> {
        let mut series = row![].spacing(GAP);

        for s in service.series() {
            let handle = service.get_image(&s.poster);
            series = series.push(
                column![image(handle).height(Length::Units(200)), text(&s.title),]
                    .spacing(GAP)
                    .align_items(Alignment::Center),
            );
        }

        column![series].spacing(GAP).into()
    }
}
